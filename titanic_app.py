# -*- coding: utf-8 -*-
"""Titanic_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bHfI8X7IyVbuWb6Uu5L2__Zgh8w57YFY
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler

# Load model and scaler from pickle files
model_file = 'RFC_titanic.pkl'  # Path to your trained model pickle file
scaler_file = 'scaler.pkl'        # Path to your trained scaler pickle file

# Load the model
with open(model_file, 'rb') as f:
    model = pickle.load(f)

# Load the scaler
with open(scaler_file, 'rb') as f:
    scaler = pickle.load(f)

# Streamlit UI setup
st.title("Titanic Survival Prediction")
st.write("""
    This application predicts the survival chances of passengers on the Titanic based on features.
    Please enter the details below:
""")

# Input fields for the features
age = st.number_input("Age", min_value=0, max_value=100, value=30)
sex = st.selectbox("Sex", ['male', 'female'])
pclass = st.selectbox("Pclass (Passenger Class)", [1, 2, 3])
sibsp = st.number_input("Siblings/Spouse aboard", min_value=0, value=0)
parch = st.number_input("Parents/Children aboard", min_value=0, value=0)
fare = st.number_input("Fare", min_value=0.0, value=7.25)
embarked = st.selectbox("Embarked (C = Cherbourg, Q = Queenstown, S = Southampton)", ['C', 'Q', 'S'])

# Prepare the input data
sex_mapped = 1 if sex == 'male' else 0
embarked_mapped = {'C': 0, 'Q': 1, 'S': 2}[embarked]

# Create a DataFrame for the input
input_data = pd.DataFrame({
    'Pclass': [pclass],
    'Sex': [sex_mapped],
    'Age': [age],
    'SibSp': [sibsp],
    'Parch': [parch],
    'Fare': [fare],
    'Embarked': [embarked_mapped]
})

# Feature scaling
input_data_scaled = scaler.transform(input_data)

# Predict the survival
if st.button('Predict Survival'):
    prediction = model.predict(input_data_scaled)
    if prediction[0] == 1:
        st.write("**Prediction**: Survived")
    else:
        st.write("**Prediction**: Did not survive")

# Option to show the dataframe
if st.checkbox('Show input data'):
    st.write(input_data)